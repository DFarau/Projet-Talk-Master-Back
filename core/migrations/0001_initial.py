# Generated by Django 5.2.1 on 2025-05-14 20:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True, verbose_name="Nom")),
            ],
            options={
                "verbose_name": "Salle",
                "verbose_name_plural": "Salles",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=255, unique=True, verbose_name="Adresse e-mail"),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("organizer", "Organisateur"),
                            ("speaker", "Conférencier"),
                            ("public", "Participant"),
                        ],
                        default="public",
                        max_length=20,
                        verbose_name="Rôle",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Utilisateur",
                "verbose_name_plural": "Utilisateurs",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Talk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titre")),
                ("description", models.TextField(verbose_name="Description")),
                ("start", models.DateTimeField(verbose_name="Heure de début")),
                ("end", models.DateTimeField(verbose_name="Heure de fin")),
                ("startdate", models.DateField(verbose_name="Jour")),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("beginner", "Débutant"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                        ],
                        max_length=12,
                        verbose_name="Niveau",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("accepted", "Accepté"),
                            ("rejected", "Refusé"),
                        ],
                        default="pending",
                        max_length=10,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "speakerName",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Nom du conférencier"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "organizer"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organized_talks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Organisateur",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="talks",
                        to="core.room",
                        verbose_name="Salle",
                    ),
                ),
                (
                    "speaker",
                    models.ForeignKey(
                        limit_choices_to={"role": "speaker"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="talks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Conférencier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Présentation",
                "verbose_name_plural": "Présentations",
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("room__isnull", False)),
                        fields=("room", "start", "end"),
                        name="unique_room_time_slot",
                    )
                ],
            },
        ),
    ]
